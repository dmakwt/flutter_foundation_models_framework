// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


/// Data class for text summarization request
class SummarizationRequest {
  SummarizationRequest({
    required this.text,
    this.maxLength,
    this.style,
  });

  String text;

  int? maxLength;

  String? style;

  List<Object?> _toList() {
    return <Object?>[
      text,
      maxLength,
      style,
    ];
  }

  Object encode() {
    return _toList();  }

  static SummarizationRequest decode(Object result) {
    result as List<Object?>;
    return SummarizationRequest(
      text: result[0]! as String,
      maxLength: result[1] as int?,
      style: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SummarizationRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Data class for text summarization response
class SummarizationResponse {
  SummarizationResponse({
    required this.summary,
    required this.originalLength,
    required this.summaryLength,
  });

  String summary;

  int originalLength;

  int summaryLength;

  List<Object?> _toList() {
    return <Object?>[
      summary,
      originalLength,
      summaryLength,
    ];
  }

  Object encode() {
    return _toList();  }

  static SummarizationResponse decode(Object result) {
    result as List<Object?>;
    return SummarizationResponse(
      summary: result[0]! as String,
      originalLength: result[1]! as int,
      summaryLength: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SummarizationResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Data class for text embedding request
class EmbeddingRequest {
  EmbeddingRequest({
    required this.text,
    this.model,
  });

  String text;

  String? model;

  List<Object?> _toList() {
    return <Object?>[
      text,
      model,
    ];
  }

  Object encode() {
    return _toList();  }

  static EmbeddingRequest decode(Object result) {
    result as List<Object?>;
    return EmbeddingRequest(
      text: result[0]! as String,
      model: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! EmbeddingRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Data class for text embedding response
class EmbeddingResponse {
  EmbeddingResponse({
    required this.embedding,
    required this.dimensions,
  });

  List<double> embedding;

  int dimensions;

  List<Object?> _toList() {
    return <Object?>[
      embedding,
      dimensions,
    ];
  }

  Object encode() {
    return _toList();  }

  static EmbeddingResponse decode(Object result) {
    result as List<Object?>;
    return EmbeddingResponse(
      embedding: (result[0] as List<Object?>?)!.cast<double>(),
      dimensions: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! EmbeddingResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Data class for availability check response
class AvailabilityResponse {
  AvailabilityResponse({
    required this.isAvailable,
    required this.osVersion,
    this.errorMessage,
  });

  bool isAvailable;

  String osVersion;

  String? errorMessage;

  List<Object?> _toList() {
    return <Object?>[
      isAvailable,
      osVersion,
      errorMessage,
    ];
  }

  Object encode() {
    return _toList();  }

  static AvailabilityResponse decode(Object result) {
    result as List<Object?>;
    return AvailabilityResponse(
      isAvailable: result[0]! as bool,
      osVersion: result[1]! as String,
      errorMessage: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AvailabilityResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is SummarizationRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is SummarizationResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is EmbeddingRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is EmbeddingResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is AvailabilityResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return SummarizationRequest.decode(readValue(buffer)!);
      case 130: 
        return SummarizationResponse.decode(readValue(buffer)!);
      case 131: 
        return EmbeddingRequest.decode(readValue(buffer)!);
      case 132: 
        return EmbeddingResponse.decode(readValue(buffer)!);
      case 133: 
        return AvailabilityResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Host API for Foundation Models operations
class FoundationModelsApi {
  /// Constructor for [FoundationModelsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FoundationModelsApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Check if Foundation Models framework is available on the device
  Future<AvailabilityResponse> checkAvailability() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.checkAvailability$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AvailabilityResponse?)!;
    }
  }

  /// Summarize the given text using Foundation Models
  Future<SummarizationResponse> summarizeText(SummarizationRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.summarizeText$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as SummarizationResponse?)!;
    }
  }

  /// Generate text embeddings using Foundation Models
  Future<EmbeddingResponse> generateEmbedding(EmbeddingRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.generateEmbedding$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as EmbeddingResponse?)!;
    }
  }
}
