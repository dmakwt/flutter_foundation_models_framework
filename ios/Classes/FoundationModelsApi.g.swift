// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsFoundationModelsApi(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsFoundationModelsApi(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsFoundationModelsApi(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashFoundationModelsApi(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashFoundationModelsApi(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashFoundationModelsApi(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Data class for chat request
///
/// Generated class from Pigeon that represents data sent in messages.
struct ChatRequest: Hashable {
  var prompt: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ChatRequest? {
    let prompt = pigeonVar_list[0] as! String

    return ChatRequest(
      prompt: prompt
    )
  }
  func toList() -> [Any?] {
    return [
      prompt
    ]
  }
  static func == (lhs: ChatRequest, rhs: ChatRequest) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

/// Data class for chat response
///
/// Generated class from Pigeon that represents data sent in messages.
struct ChatResponse: Hashable {
  var content: String
  var errorMessage: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ChatResponse? {
    let content = pigeonVar_list[0] as! String
    let errorMessage: String? = nilOrValue(pigeonVar_list[1])

    return ChatResponse(
      content: content,
      errorMessage: errorMessage
    )
  }
  func toList() -> [Any?] {
    return [
      content,
      errorMessage,
    ]
  }
  static func == (lhs: ChatResponse, rhs: ChatResponse) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

/// Data class for availability check response
///
/// Generated class from Pigeon that represents data sent in messages.
struct AvailabilityResponse: Hashable {
  var isAvailable: Bool
  var osVersion: String
  var errorMessage: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AvailabilityResponse? {
    let isAvailable = pigeonVar_list[0] as! Bool
    let osVersion = pigeonVar_list[1] as! String
    let errorMessage: String? = nilOrValue(pigeonVar_list[2])

    return AvailabilityResponse(
      isAvailable: isAvailable,
      osVersion: osVersion,
      errorMessage: errorMessage
    )
  }
  func toList() -> [Any?] {
    return [
      isAvailable,
      osVersion,
      errorMessage,
    ]
  }
  static func == (lhs: AvailabilityResponse, rhs: AvailabilityResponse) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

private class FoundationModelsApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return ChatRequest.fromList(self.readValue() as! [Any?])
    case 130:
      return ChatResponse.fromList(self.readValue() as! [Any?])
    case 131:
      return AvailabilityResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FoundationModelsApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ChatRequest {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ChatResponse {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? AvailabilityResponse {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FoundationModelsApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FoundationModelsApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FoundationModelsApiPigeonCodecWriter(data: data)
  }
}

class FoundationModelsApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FoundationModelsApiPigeonCodec(readerWriter: FoundationModelsApiPigeonCodecReaderWriter())
}


/// Host API for Foundation Models operations
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FoundationModelsApi {
  /// Check if Foundation Models framework is available on the device
  func checkAvailability(completion: @escaping (Result<AvailabilityResponse, Error>) -> Void)
  /// Create a new language model session and send a prompt
  func sendPrompt(request: ChatRequest, completion: @escaping (Result<ChatResponse, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FoundationModelsApiSetup {
  static var codec: FlutterStandardMessageCodec { FoundationModelsApiPigeonCodec.shared }
  /// Sets up an instance of `FoundationModelsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FoundationModelsApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Check if Foundation Models framework is available on the device
    let checkAvailabilityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.checkAvailability\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      checkAvailabilityChannel.setMessageHandler { _, reply in
        api.checkAvailability { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      checkAvailabilityChannel.setMessageHandler(nil)
    }
    /// Create a new language model session and send a prompt
    let sendPromptChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.sendPrompt\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendPromptChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! ChatRequest
        api.sendPrompt(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendPromptChannel.setMessageHandler(nil)
    }
  }
}
