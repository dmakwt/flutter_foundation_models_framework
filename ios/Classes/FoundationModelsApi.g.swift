// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsFoundationModelsApi(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsFoundationModelsApi(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsFoundationModelsApi(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashFoundationModelsApi(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashFoundationModelsApi(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashFoundationModelsApi(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Data class for text summarization request
///
/// Generated class from Pigeon that represents data sent in messages.
struct SummarizationRequest: Hashable {
  var text: String
  var maxLength: Int64? = nil
  var style: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SummarizationRequest? {
    let text = pigeonVar_list[0] as! String
    let maxLength: Int64? = nilOrValue(pigeonVar_list[1])
    let style: String? = nilOrValue(pigeonVar_list[2])

    return SummarizationRequest(
      text: text,
      maxLength: maxLength,
      style: style
    )
  }
  func toList() -> [Any?] {
    return [
      text,
      maxLength,
      style,
    ]
  }
  static func == (lhs: SummarizationRequest, rhs: SummarizationRequest) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

/// Data class for text summarization response
///
/// Generated class from Pigeon that represents data sent in messages.
struct SummarizationResponse: Hashable {
  var summary: String
  var originalLength: Int64
  var summaryLength: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SummarizationResponse? {
    let summary = pigeonVar_list[0] as! String
    let originalLength = pigeonVar_list[1] as! Int64
    let summaryLength = pigeonVar_list[2] as! Int64

    return SummarizationResponse(
      summary: summary,
      originalLength: originalLength,
      summaryLength: summaryLength
    )
  }
  func toList() -> [Any?] {
    return [
      summary,
      originalLength,
      summaryLength,
    ]
  }
  static func == (lhs: SummarizationResponse, rhs: SummarizationResponse) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

/// Data class for text embedding request
///
/// Generated class from Pigeon that represents data sent in messages.
struct EmbeddingRequest: Hashable {
  var text: String
  var model: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> EmbeddingRequest? {
    let text = pigeonVar_list[0] as! String
    let model: String? = nilOrValue(pigeonVar_list[1])

    return EmbeddingRequest(
      text: text,
      model: model
    )
  }
  func toList() -> [Any?] {
    return [
      text,
      model,
    ]
  }
  static func == (lhs: EmbeddingRequest, rhs: EmbeddingRequest) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

/// Data class for text embedding response
///
/// Generated class from Pigeon that represents data sent in messages.
struct EmbeddingResponse: Hashable {
  var embedding: [Double]
  var dimensions: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> EmbeddingResponse? {
    let embedding = pigeonVar_list[0] as! [Double]
    let dimensions = pigeonVar_list[1] as! Int64

    return EmbeddingResponse(
      embedding: embedding,
      dimensions: dimensions
    )
  }
  func toList() -> [Any?] {
    return [
      embedding,
      dimensions,
    ]
  }
  static func == (lhs: EmbeddingResponse, rhs: EmbeddingResponse) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

/// Data class for availability check response
///
/// Generated class from Pigeon that represents data sent in messages.
struct AvailabilityResponse: Hashable {
  var isAvailable: Bool
  var osVersion: String
  var errorMessage: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AvailabilityResponse? {
    let isAvailable = pigeonVar_list[0] as! Bool
    let osVersion = pigeonVar_list[1] as! String
    let errorMessage: String? = nilOrValue(pigeonVar_list[2])

    return AvailabilityResponse(
      isAvailable: isAvailable,
      osVersion: osVersion,
      errorMessage: errorMessage
    )
  }
  func toList() -> [Any?] {
    return [
      isAvailable,
      osVersion,
      errorMessage,
    ]
  }
  static func == (lhs: AvailabilityResponse, rhs: AvailabilityResponse) -> Bool {
    return deepEqualsFoundationModelsApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFoundationModelsApi(value: toList(), hasher: &hasher)
  }
}

private class FoundationModelsApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return SummarizationRequest.fromList(self.readValue() as! [Any?])
    case 130:
      return SummarizationResponse.fromList(self.readValue() as! [Any?])
    case 131:
      return EmbeddingRequest.fromList(self.readValue() as! [Any?])
    case 132:
      return EmbeddingResponse.fromList(self.readValue() as! [Any?])
    case 133:
      return AvailabilityResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FoundationModelsApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SummarizationRequest {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? SummarizationResponse {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? EmbeddingRequest {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? EmbeddingResponse {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? AvailabilityResponse {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FoundationModelsApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FoundationModelsApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FoundationModelsApiPigeonCodecWriter(data: data)
  }
}

class FoundationModelsApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FoundationModelsApiPigeonCodec(readerWriter: FoundationModelsApiPigeonCodecReaderWriter())
}


/// Host API for Foundation Models operations
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FoundationModelsApi {
  /// Check if Foundation Models framework is available on the device
  func checkAvailability(completion: @escaping (Result<AvailabilityResponse, Error>) -> Void)
  /// Summarize the given text using Foundation Models
  func summarizeText(request: SummarizationRequest, completion: @escaping (Result<SummarizationResponse, Error>) -> Void)
  /// Generate text embeddings using Foundation Models
  func generateEmbedding(request: EmbeddingRequest, completion: @escaping (Result<EmbeddingResponse, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FoundationModelsApiSetup {
  static var codec: FlutterStandardMessageCodec { FoundationModelsApiPigeonCodec.shared }
  /// Sets up an instance of `FoundationModelsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FoundationModelsApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Check if Foundation Models framework is available on the device
    let checkAvailabilityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.checkAvailability\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      checkAvailabilityChannel.setMessageHandler { _, reply in
        api.checkAvailability { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      checkAvailabilityChannel.setMessageHandler(nil)
    }
    /// Summarize the given text using Foundation Models
    let summarizeTextChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.summarizeText\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      summarizeTextChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! SummarizationRequest
        api.summarizeText(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      summarizeTextChannel.setMessageHandler(nil)
    }
    /// Generate text embeddings using Foundation Models
    let generateEmbeddingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.foundation_models_framework.FoundationModelsApi.generateEmbedding\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      generateEmbeddingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! EmbeddingRequest
        api.generateEmbedding(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      generateEmbeddingChannel.setMessageHandler(nil)
    }
  }
}
